package com.ecommerce.platform.order.domain.enums;

/**
 * Enum que representa os diferentes tipos de pedidos no sistema
 * Define a natureza e origem do pedido, determinando
 * como ele deve ser processado e tratado pelos diferentes serviços.
 * Tipos de pedidos suportados:
 * 1. ONE_TIME → Pedido único, compra avulsa
 * 2. SUBSCRIPTION_GENERATED → Pedido gerado automaticamente por assinatura
 * 3. RECURRING → Pedido recorrente programado
 * 4. TRIAL → Pedido de período de teste
 * 5. GIFT → Pedido de presente/voucher
 * Cada tipo tem características específicas:
 * - Forma de pagamento
 * - Processamento automático vs manual
 * - Políticas de cancelamento
 * - Integração com outros serviços
 * Padrões implementados:
 * - Strategy Pattern: Cada tipo tem comportamento específico
 * - Business Rules: Regras diferentes por tipo
 * - Event Routing: Eventos direcionados conforme tipo
 */
public enum OrderType {
    
    /**
     * Pedido único - Compra avulsa tradicional
     * Características:
     * - Cliente escolhe produtos e finaliza compra
     * - Pagamento único na finalização
     * - Não gera pedidos futuros automaticamente
     * - Política de cancelamento padrão
     * Fluxo típico:
     * 1. Cliente adiciona itens ao carrinho
     * 2. Finaliza compra com pagamento
     * 3. Pedido é processado uma única vez
     * 4. Entrega realizada
     */
    ONE_TIME(
        "Pedido Único",
        "Compra avulsa tradicional com pagamento único",
        true,  // requiresPayment
        false, // isRecurring
        false, // isAutoGenerated
        30     // defaultCancellationPeriodDays
    ),
    
    /**
     * Pedido gerado automaticamente por assinatura ativa
     * Características:
     * - Criado automaticamente quando assinatura é ativada
     * - Pagamento já processado pela assinatura
     * - Faz parte de um ciclo recorrente
     * - Política de cancelamento restrita
     * Fluxo típico:
     * 1. Assinatura é ativada (pagamento OK)
     * 2. Sistema gera pedido automaticamente
     * 3. Pedido é processado sem novo pagamento
     * 4. Entrega realizada conforme cronograma
     */
    SUBSCRIPTION_GENERATED(
        "Assinatura",
        "Pedido gerado automaticamente por assinatura ativa",
        false, // requiresPayment (já pago pela assinatura)
        true,  // isRecurring
        true,  // isAutoGenerated
        7      // defaultCancellationPeriodDays (mais restritivo)
    ),
    
    /**
     * Pedido recorrente programado
     * Características:
     * - Agendado para repetir em intervalos específicos
     * - Cada ocorrência requer novo pagamento
     * - Cliente pode modificar ou cancelar programação
     * - Integração com scheduler para automação
     * Fluxo típico:
     * 1. Cliente configura pedido recorrente
     * 2. Sistema agenda próximas execuções
     * 3. A cada ciclo, novo pagamento é processado
     * 4. Se pagamento OK, pedido é criado e processado
     */
    RECURRING(
        "Recorrente",
        "Pedido programado para repetir em intervalos regulares",
        true,  // requiresPayment (a cada ciclo)
        true,  // isRecurring
        true,  // isAutoGenerated
        15     // defaultCancellationPeriodDays
    ),
    
    /**
     * Pedido de período de teste/trial
     * Características:
     * - Sem cobrança ou cobrança simbólica
     * - Duração limitada
     * - Conversão automática para tipo paid após trial
     * - Política de cancelamento flexível
     * Fluxo típico:
     * 1. Cliente inicia trial gratuito
     * 2. Pedido trial é criado sem pagamento
     * 3. Cliente usa serviço durante período
     * 4. Ao final, converte para assinatura paga
     */
    TRIAL(
        "Período de Teste",
        "Pedido de trial gratuito ou com cobrança simbólica",
        false, // requiresPayment (gratuito ou simbólico)
        false, // isRecurring (trial é único)
        true,  // isAutoGenerated
        1      // defaultCancellationPeriodDays (muito flexível)
    ),
    
    /**
     * Pedido de presente ou voucher
     * Características:
     * - Pago por uma pessoa, entregue para outra
     * - Dados de entrega diferentes do pagador
     * - Pode ter validade específica
     * - Política de cancelamento especial
     * Fluxo típico:
     * 1. Cliente A compra presente para cliente B
     * 2. Pagamento processado normalmente
     * 3. Produto/serviço entregue para cliente B
     * 4. Notificações enviadas para ambos
     */
    GIFT(
        "Presente",
        "Pedido de presente ou voucher para terceiros",
        true,  // requiresPayment
        false, // isRecurring
        false, // isAutoGenerated
        7      // defaultCancellationPeriodDays (restritivo para presentes)
    );

    private final String displayName;
    private final String description;
    private final boolean requiresPayment;
    private final boolean isRecurring;
    private final boolean isAutoGenerated;
    private final int defaultCancellationPeriodDays;

    /**
     * Constructor do enum
     */
    OrderType(String displayName, String description, boolean requiresPayment, 
              boolean isRecurring, boolean isAutoGenerated, int defaultCancellationPeriodDays) {
        this.displayName = displayName;
        this.description = description;
        this.requiresPayment = requiresPayment;
        this.isRecurring = isRecurring;
        this.isAutoGenerated = isAutoGenerated;
        this.defaultCancellationPeriodDays = defaultCancellationPeriodDays;
    }

    /**
     * Obtém nome para exibição
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Obtém descrição detalhada
     */
    public String getDescription() {
        return description;
    }

    /**
     * Verifica se tipo requer processamento de pagamento
     */
    public boolean requiresPayment() {
        return requiresPayment;
    }

    /**
     * Verifica se é um tipo recorrente
     */
    public boolean isRecurring() {
        return isRecurring;
    }

    /**
     * Verifica se é gerado automaticamente pelo sistema
     */
    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    /**
     * Obtém período padrão para cancelamento (em dias)
     */
    public int getDefaultCancellationPeriodDays() {
        return defaultCancellationPeriodDays;
    }

    /**
     * Verifica se é um pedido manual (criado pelo cliente)
     */
    public boolean isManual() {
        return !isAutoGenerated;
    }

    /**
     * Verifica se é um pedido único (não recorrente)
     */
    public boolean isOneTime() {
        return !isRecurring;
    }

    /**
     * Verifica se requer aprovação manual
     */
    public boolean requiresManualApproval() {
        // Presentes e trials podem requerer aprovação
        return this == GIFT || this == TRIAL;
    }

    /**
     * Verifica se permite modificação após criação
     */
    public boolean allowsModification() {
        // Pedidos auto-gerados normalmente não permitem modificação
        return !isAutoGenerated;
    }

    /**
     * Obtém prioridade de processamento (1 = maior prioridade)
     */
    public int getProcessingPriority() {
        return switch (this) {
            case SUBSCRIPTION_GENERATED -> 1; // Maior prioridade (cliente já pagou)
            case ONE_TIME -> 2;               // Prioridade normal
            case RECURRING -> 3;              // Prioridade normal
            case GIFT -> 4;                   // Prioridade alta (experiência do presente)
            case TRIAL -> 5;                  // Menor prioridade
        };
    }

    /**
     * Obtém tópico Kafka para eventos deste tipo
     */
    public String getEventTopic() {
        return switch (this) {
            case SUBSCRIPTION_GENERATED -> "subscription.orders";
            case RECURRING -> "recurring.orders";
            case TRIAL -> "trial.orders";
            case GIFT -> "gift.orders";
            default -> "order.events";
        };
    }

    /**
     * Verifica se deve notificar cliente imediatamente
     */
    public boolean shouldNotifyImmediately() {
        // Pedidos manuais sempre notificam, auto-gerados podem agrupar
        return isManual();
    }

    /**
     * Obtém ícone para exibição na UI
     */
    public String getDisplayIcon() {
        return switch (this) {
            case ONE_TIME -> "🛒";
            case SUBSCRIPTION_GENERATED -> "🔄";
            case RECURRING -> "📅";
            case TRIAL -> "🆓";
            case GIFT -> "🎁";
        };
    }
}